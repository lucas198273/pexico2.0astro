---
const { className } = Astro.props;
---
<header class={`bg-gradient-to-r from-black to-[#1e1cc4] shadow-lg ${className}`}>
  <nav class="container mx-auto flex items-center justify-between p-4 h-16">
    <!-- Logo -->
    <div class="flex items-center">
      <img src="/assets/Diastech.png" alt="Diastech Logo" class="h-12 w-12 rounded-full object-cover shadow-lg">
    </div>

    <!-- Links de navegação (desktop) -->
    <ul class="hidden md:flex space-x-8">
      <li><a href="/" class="text-white hover:text-blue-300 transition duration-200">Home</a></li>
      <li><a href="/about" class="text-white hover:text-blue-300 transition duration-200">About</a></li>
      <li><a href="/services" class="text-white hover:text-blue-300 transition duration-200">Services</a></li>
      <li><a href="/contact" class="text-white hover:text-blue-300 transition duration-200">Contact</a></li>
    </ul>

    <!-- Botão para mobile -->
    <div class="md:hidden">
      <button class="text-white menu-button bg-gradient-to-r from-black to-[#1e1cc4] p-2 rounded transition duration-200" aria-label="Toggle Menu" aria-expanded="false">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
  </nav>

  <!-- Menu mobile (inicialmente oculto) -->
  <div id="mobile-menu" class="md:hiddenbg-gradient-to-r from-black to-[#1e1cc4] p-4 hidden rounded-lg shadow-lg">
    <ul class="space-y-4">
      <li><a href="/" class="text-white block py-2 px-4 hover:bg-blue-700 rounded transition duration-200">Home</a></li>
      <li><a href="/about" class="text-white block py-2 px-4 hover:bg-blue-700 rounded transition duration-200">About</a></li>
      <li><a href="/services" class="text-white block py-2 px-4 hover:bg-blue-700 rounded transition duration-200">Services</a></li>
      <li><a href="/contact" class="text-white block py-2 px-4 hover:bg-blue-700 rounded transition duration-200">Contact</a></li>
    </ul>
    
  </div>
</header>


<script>
  // Estado do menu
  let isOpen = false;

  // Função para obter o SVG do botão
  function getMenuButtonSVG(isOpen: boolean) {   
    return isOpen ? `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>` : `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>`;
  }

  // Função para alternar o menu
  function toggleMenu() {
    isOpen = !isOpen;
    console.log('Menu isOpen:', isOpen); // Adicionado para depuração
    const mobileMenu = document.getElementById('mobile-menu');
    const menuButton = document.querySelector('.menu-button');

    if (mobileMenu) {
      mobileMenu.classList.toggle('hidden', !isOpen);
    }

    if (menuButton) {
      menuButton.innerHTML = getMenuButtonSVG(isOpen);
      menuButton.setAttribute('aria-expanded', String(isOpen));
    }
  }

  // Adicionar evento ao botão do menu
  document.addEventListener('DOMContentLoaded', () => {
    const menuButton = document.querySelector('.menu-button');
    console.log('Menu button:', menuButton); // Adicionado para depuração
    
    if (menuButton) {
      menuButton.addEventListener('click', toggleMenu);
    }
  });
</script>